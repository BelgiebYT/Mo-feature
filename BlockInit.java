package com.belgieyt.morefeatures.init;

import com.belgieyt.morefeatures.MoreFeatures;
import com.belgieyt.morefeatures.blocks.*;
import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.item.*;
import net.minecraft.particles.ParticleTypes;
import net.minecraft.potion.Effects;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;

public class BlockInit {

    public static DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MoreFeatures.MOD_ID);

    // Blocks
    public static final RegistryObject<Block> STRAWBERRY_BUSH = BLOCKS.register("strawberry_bush", () -> new StrawberryBush(AbstractBlock.Properties.from(Blocks.SWEET_BERRY_BUSH)));
    public static final RegistryObject<Block> MILK_CUP = BLOCKS.register("milkcup_flower", () -> new FlowerBlock( Effects.HASTE, 10,AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> MAGENTA_LEAVES = BLOCKS.register("magenta_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> BLUEBERRY_BUSH = BLOCKS.register("blueberry_bush", () -> new BlueberryBush(AbstractBlock.Properties.from(Blocks.SWEET_BERRY_BUSH)));
    public static final RegistryObject<Block> KIWI_VINES = BLOCKS.register("kiwi_vines", () -> new KiwiVines(AbstractBlock.Properties.from(Blocks.SWEET_BERRY_BUSH)));
    public static final RegistryObject<Block> BLACKBERRY_BUSH = BLOCKS.register("blackberry_bush", () -> new BlackberryBush(AbstractBlock.Properties.from(Blocks.SWEET_BERRY_BUSH)));
    public static final RegistryObject<TorchBlock> DEVIL_TORCH = BLOCKS.register("devil_torch", () -> new TorchBlock(AbstractBlock.Properties.from(Blocks.TORCH).doesNotBlockMovement().zeroHardnessAndResistance().setLightLevel((p_235470_0_) -> {
        return 15;}).sound(SoundType.NETHERITE), ParticleTypes.CRIMSON_SPORE));
    public static final RegistryObject<WallTorchBlock> DEVIL_WALL_TORCH = BLOCKS.register("devil_wall_torch",() -> new WallTorchBlock(AbstractBlock.Properties.from(Blocks.WALL_TORCH).doesNotBlockMovement().zeroHardnessAndResistance().setLightLevel((p_235469_0_) -> {
        return 15;
    }).sound(SoundType.NETHERITE).lootFrom(DEVIL_TORCH.get()), ParticleTypes.CRIMSON_SPORE));
    public static final RegistryObject<Block> BLACK_PLANKS = BLOCKS.register("black_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> BLACK_PLANK_STAIRS = BLOCKS.register("black_plank_stairs", () -> new StairsBlock(BLACK_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(BLACK_PLANKS.get())));
    public static final RegistryObject<SlabBlock> BLACK_PLANK_SLAB = BLOCKS.register("black_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(BLACK_PLANKS.get())));
    public static final RegistryObject<DoorBlock> BLACK_PLANK_DOOR = BLOCKS.register("black_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> BLACK_PLANK_TRAPDOOR = BLOCKS.register("black_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> WHITE_PLANKS = BLOCKS.register("white_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> WHITE_PLANK_STAIRS = BLOCKS.register("white_plank_stairs", () -> new StairsBlock(WHITE_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(WHITE_PLANKS.get())));
    public static final RegistryObject<SlabBlock> WHITE_PLANK_SLAB = BLOCKS.register("white_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(WHITE_PLANKS.get())));
    public static final RegistryObject<DoorBlock> WHITE_PLANK_DOOR = BLOCKS.register("white_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> WHITE_PLANK_TRAPDOOR = BLOCKS.register("white_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> RED_PLANKS = BLOCKS.register("red_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> RED_PLANK_STAIRS = BLOCKS.register("red_plank_stairs", () -> new StairsBlock(RED_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(RED_PLANKS.get())));
    public static final RegistryObject<SlabBlock> RED_PLANK_SLAB = BLOCKS.register("red_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(RED_PLANKS.get())));
    public static final RegistryObject<DoorBlock> RED_PLANK_DOOR = BLOCKS.register("red_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> RED_PLANK_TRAPDOOR = BLOCKS.register("red_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> BLUE_PLANKS = BLOCKS.register("blue_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> BLUE_PLANK_STAIRS = BLOCKS.register("blue_plank_stairs", () -> new StairsBlock(BLUE_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(BLUE_PLANKS.get())));
    public static final RegistryObject<SlabBlock> BLUE_PLANK_SLAB = BLOCKS.register("blue_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(BLUE_PLANKS.get())));
    public static final RegistryObject<DoorBlock> BLUE_PLANK_DOOR = BLOCKS.register("blue_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> BLUE_PLANK_TRAPDOOR = BLOCKS.register("blue_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> GRAY_PLANKS = BLOCKS.register("gray_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> GRAY_PLANK_STAIRS = BLOCKS.register("gray_plank_stairs", () -> new StairsBlock(GRAY_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(GRAY_PLANKS.get())));
    public static final RegistryObject<SlabBlock> GRAY_PLANK_SLAB = BLOCKS.register("gray_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(GRAY_PLANKS.get())));
    public static final RegistryObject<DoorBlock> GRAY_PLANK_DOOR = BLOCKS.register("gray_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> GRAY_PLANK_TRAPDOOR = BLOCKS.register("gray_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> PINK_PLANKS = BLOCKS.register("pink_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> PINK_PLANK_STAIRS = BLOCKS.register("pink_plank_stairs", () -> new StairsBlock(PINK_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(PINK_PLANKS.get())));
    public static final RegistryObject<SlabBlock> PINK_PLANK_SLAB = BLOCKS.register("pink_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(PINK_PLANKS.get())));
    public static final RegistryObject<DoorBlock> PINK_PLANK_DOOR = BLOCKS.register("pink_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> PINK_PLANK_TRAPDOOR = BLOCKS.register("pink_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> ORANGE_PLANKS = BLOCKS.register("orange_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> ORANGE_PLANK_STAIRS = BLOCKS.register("orange_plank_stairs", () -> new StairsBlock(ORANGE_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(ORANGE_PLANKS.get())));
    public static final RegistryObject<SlabBlock> ORANGE_PLANK_SLAB = BLOCKS.register("orange_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(ORANGE_PLANKS.get())));
    public static final RegistryObject<DoorBlock> ORANGE_PLANK_DOOR = BLOCKS.register("orange_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> ORANGE_PLANK_TRAPDOOR = BLOCKS.register("orange_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> LIME_PLANKS = BLOCKS.register("lime_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> LIME_PLANK_STAIRS = BLOCKS.register("lime_plank_stairs", () -> new StairsBlock(LIME_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(LIME_PLANKS.get())));
    public static final RegistryObject<SlabBlock> LIME_PLANK_SLAB = BLOCKS.register("lime_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(LIME_PLANKS.get())));
    public static final RegistryObject<DoorBlock> LIME_PLANK_DOOR = BLOCKS.register("lime_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> LIME_PLANK_TRAPDOOR = BLOCKS.register("lime_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<StairsBlock> DIRT_STAIRS = BLOCKS.register("dirt_stairs", () -> new StairsBlock(Blocks.DIRT.getDefaultState(), AbstractBlock.Properties.from(Blocks.DIRT)));
    public static final RegistryObject<SlabBlock> DIRT_SLAB = BLOCKS.register("dirt_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.DIRT)));
    public static final RegistryObject<WallBlock> STONE_WALL = BLOCKS.register("stone_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<WallBlock> SMOOTH_STONE_WALL = BLOCKS.register("smooth_stone_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<WallBlock> QUARTZ_WALL = BLOCKS.register("quartz_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<WallBlock> PRISMARINE_BRICK_WALL = BLOCKS.register("prismarine_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<WallBlock> DARK_PRISMARINE_WALL = BLOCKS.register("dark_prismarine_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<FenceBlock> OAK_LOG_FENCE = BLOCKS.register("oak_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> SPRUCE_LOG_FENCE = BLOCKS.register("spruce_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> BIRCH_LOG_FENCE = BLOCKS.register("birch_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> JUNGLE_LOG_FENCE = BLOCKS.register("jungle_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> ACACIA_LOG_FENCE = BLOCKS.register("acacia_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> DARK_OAK_LOG_FENCE = BLOCKS.register("dark_oak_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> CRIMSON_LOG_FENCE = BLOCKS.register("crimson_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<FenceBlock> WARPED_LOG_FENCE = BLOCKS.register("warped_log_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<Block> BROWN_PLANKS = BLOCKS.register("brown_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> BROWN_PLANK_STAIRS = BLOCKS.register("brown_plank_stairs", () -> new StairsBlock(BROWN_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(BROWN_PLANKS.get())));
    public static final RegistryObject<SlabBlock> BROWN_PLANK_SLAB = BLOCKS.register("brown_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(BROWN_PLANKS.get())));
    public static final RegistryObject<DoorBlock> BROWN_PLANK_DOOR = BLOCKS.register("brown_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> BROWN_PLANK_TRAPDOOR = BLOCKS.register("brown_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> YELLOW_PLANKS = BLOCKS.register("yellow_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> YELLOW_PLANK_STAIRS = BLOCKS.register("yellow_plank_stairs", () -> new StairsBlock(YELLOW_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(YELLOW_PLANKS.get())));
    public static final RegistryObject<SlabBlock> YELLOW_PLANK_SLAB = BLOCKS.register("yellow_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(YELLOW_PLANKS.get())));
    public static final RegistryObject<DoorBlock> YELLOW_PLANK_DOOR = BLOCKS.register("yellow_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> YELLOW_PLANK_TRAPDOOR = BLOCKS.register("yellow_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> LIGHT_GRAY_PLANKS = BLOCKS.register("light_gray_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> LIGHT_GRAY_PLANK_STAIRS = BLOCKS.register("light_gray_plank_stairs", () -> new StairsBlock(LIGHT_GRAY_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(LIGHT_GRAY_PLANKS.get())));
    public static final RegistryObject<SlabBlock> LIGHT_GRAY_PLANK_SLAB = BLOCKS.register("light_gray_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(LIGHT_GRAY_PLANKS.get())));
    public static final RegistryObject<DoorBlock> LIGHT_GRAY_PLANK_DOOR = BLOCKS.register("light_gray_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> LIGHT_GRAY_PLANK_TRAPDOOR = BLOCKS.register("light_gray_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> PURPLE_PLANKS = BLOCKS.register("purple_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> PURPLE_PLANK_STAIRS = BLOCKS.register("purple_plank_stairs", () -> new StairsBlock(PURPLE_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(PURPLE_PLANKS.get())));
    public static final RegistryObject<SlabBlock> PURPLE_PLANK_SLAB = BLOCKS.register("purple_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(PURPLE_PLANKS.get())));
    public static final RegistryObject<DoorBlock> PURPLE_PLANK_DOOR = BLOCKS.register("purple_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> PURPLE_PLANK_TRAPDOOR = BLOCKS.register("purple_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<Block> CYAN_PLANKS = BLOCKS.register("cyan_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> CYAN_PLANK_STAIRS = BLOCKS.register("cyan_plank_stairs", () -> new StairsBlock(CYAN_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(CYAN_PLANKS.get())));
    public static final RegistryObject<SlabBlock> CYAN_PLANK_SLAB = BLOCKS.register("cyan_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(CYAN_PLANKS.get())));
    public static final RegistryObject<DoorBlock> CYAN_PLANK_DOOR = BLOCKS.register("cyan_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> CYAN_PLANK_TRAPDOOR = BLOCKS.register("cyan_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<FenceGateBlock> OAK_LOG_FENCE_GATE = BLOCKS.register("oak_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> SPRUCE_LOG_FENCE_GATE = BLOCKS.register("spruce_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> BIRCH_LOG_FENCE_GATE = BLOCKS.register("birch_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> JUNGLE_LOG_FENCE_GATE = BLOCKS.register("jungle_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> ACACIA_LOG_FENCE_GATE = BLOCKS.register("acacia_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> DARK_OAK_LOG_FENCE_GATE = BLOCKS.register("dark_oak_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> CRIMSON_LOG_FENCE_GATE = BLOCKS.register("crimson_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> WARPED_LOG_FENCE_GATE = BLOCKS.register("warped_log_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceGateBlock> BLACK_PLANK_FENCE_GATE = BLOCKS.register("black_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> BLACK_PLANK_FENCE = BLOCKS.register("black_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> BLACK_PLANK_BUTTON = BLOCKS.register("black_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> BLACK_PLANK_PRESSURE_PLATE = BLOCKS.register("black_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> YELLOW_PLANK_FENCE_GATE = BLOCKS.register("yellow_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> YELLOW_PLANK_FENCE = BLOCKS.register("yellow_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> YELLOW_PLANK_BUTTON = BLOCKS.register("yellow_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> YELLOW_PLANK_PRESSURE_PLATE = BLOCKS.register("yellow_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> BROWN_PLANK_FENCE_GATE = BLOCKS.register("brown_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> BROWN_PLANK_FENCE = BLOCKS.register("brown_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> BROWN_PLANK_BUTTON = BLOCKS.register("brown_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> BROWN_PLANK_PRESSURE_PLATE = BLOCKS.register("brown_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> WHITE_PLANK_FENCE_GATE = BLOCKS.register("white_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> WHITE_PLANK_FENCE = BLOCKS.register("white_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> WHITE_PLANK_BUTTON = BLOCKS.register("white_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> WHITE_PLANK_PRESSURE_PLATE = BLOCKS.register("white_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> LIME_PLANK_FENCE_GATE = BLOCKS.register("lime_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> LIME_PLANK_FENCE = BLOCKS.register("lime_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> LIME_PLANK_BUTTON = BLOCKS.register("lime_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> LIME_PLANK_PRESSURE_PLATE = BLOCKS.register("lime_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<Block> MAGENTA_PLANKS = BLOCKS.register("magenta_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> MAGENTA_PLANK_STAIRS = BLOCKS.register("magenta_plank_stairs", () -> new StairsBlock(MAGENTA_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(MAGENTA_PLANKS.get())));
    public static final RegistryObject<SlabBlock> MAGENTA_PLANK_SLAB = BLOCKS.register("magenta_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(MAGENTA_PLANKS.get())));
    public static final RegistryObject<DoorBlock> MAGENTA_PLANK_DOOR = BLOCKS.register("magenta_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> MAGENTA_PLANK_TRAPDOOR = BLOCKS.register("magenta_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<FenceGateBlock> RED_PLANK_FENCE_GATE = BLOCKS.register("red_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> RED_PLANK_FENCE = BLOCKS.register("red_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> RED_PLANK_BUTTON = BLOCKS.register("red_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> RED_PLANK_PRESSURE_PLATE = BLOCKS.register("red_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> BLUE_PLANK_FENCE_GATE = BLOCKS.register("blue_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> BLUE_PLANK_FENCE = BLOCKS.register("blue_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> BLUE_PLANK_BUTTON = BLOCKS.register("blue_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> BLUE_PLANK_PRESSURE_PLATE = BLOCKS.register("blue_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> GRAY_PLANK_FENCE_GATE = BLOCKS.register("gray_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> GRAY_PLANK_FENCE = BLOCKS.register("gray_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> GRAY_PLANK_BUTTON = BLOCKS.register("gray_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> GRAY_PLANK_PRESSURE_PLATE = BLOCKS.register("gray_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> PINK_PLANK_FENCE_GATE = BLOCKS.register("pink_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> PINK_PLANK_FENCE = BLOCKS.register("pink_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> PINK_PLANK_BUTTON = BLOCKS.register("pink_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> PINK_PLANK_PRESSURE_PLATE = BLOCKS.register("pink_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> ORANGE_PLANK_FENCE_GATE = BLOCKS.register("orange_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> ORANGE_PLANK_FENCE = BLOCKS.register("orange_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> ORANGE_PLANK_BUTTON = BLOCKS.register("orange_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> ORANGE_PLANK_PRESSURE_PLATE = BLOCKS.register("orange_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> LIGHT_GRAY_PLANK_FENCE_GATE = BLOCKS.register("light_gray_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> LIGHT_GRAY_PLANK_FENCE = BLOCKS.register("light_gray_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> LIGHT_GRAY_PLANK_BUTTON = BLOCKS.register("light_gray_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> LIGHT_GRAY_PLANK_PRESSURE_PLATE = BLOCKS.register("light_gray_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> PURPLE_PLANK_FENCE_GATE = BLOCKS.register("purple_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> PURPLE_PLANK_FENCE = BLOCKS.register("purple_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> PURPLE_PLANK_BUTTON = BLOCKS.register("purple_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> PURPLE_PLANK_PRESSURE_PLATE = BLOCKS.register("purple_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> CYAN_PLANK_FENCE_GATE = BLOCKS.register("cyan_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> CYAN_PLANK_FENCE = BLOCKS.register("cyan_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> CYAN_PLANK_BUTTON = BLOCKS.register("cyan_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> CYAN_PLANK_PRESSURE_PLATE = BLOCKS.register("cyan_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<Block> GREEN_PLANKS = BLOCKS.register("green_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> GREEN_PLANK_STAIRS = BLOCKS.register("green_plank_stairs", () -> new StairsBlock(GREEN_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(GREEN_PLANKS.get())));
    public static final RegistryObject<SlabBlock> GREEN_PLANK_SLAB = BLOCKS.register("green_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(GREEN_PLANKS.get())));
    public static final RegistryObject<DoorBlock> GREEN_PLANK_DOOR = BLOCKS.register("green_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> GREEN_PLANK_TRAPDOOR = BLOCKS.register("green_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<FenceGateBlock> GREEN_PLANK_FENCE_GATE = BLOCKS.register("green_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> GREEN_PLANK_FENCE = BLOCKS.register("green_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> GREEN_PLANK_BUTTON = BLOCKS.register("green_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> GREEN_PLANK_PRESSURE_PLATE = BLOCKS.register("green_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<FenceGateBlock> MAGENTA_PLANK_FENCE_GATE = BLOCKS.register("magenta_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> MAGENTA_PLANK_FENCE = BLOCKS.register("magenta_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> MAGENTA_PLANK_BUTTON = BLOCKS.register("magenta_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> MAGENTA_PLANK_PRESSURE_PLATE = BLOCKS.register("magenta_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<Block> LIGHT_BLUE_PLANKS = BLOCKS.register("light_blue_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<StairsBlock> LIGHT_BLUE_PLANK_STAIRS = BLOCKS.register("light_blue_plank_stairs", () -> new StairsBlock(GREEN_PLANKS.get().getDefaultState(), AbstractBlock.Properties.from(GREEN_PLANKS.get())));
    public static final RegistryObject<SlabBlock> LIGHT_BLUE_PLANK_SLAB = BLOCKS.register("light_blue_plank_slab", () -> new SlabBlock(AbstractBlock.Properties.from(GREEN_PLANKS.get())));
    public static final RegistryObject<DoorBlock> LIGHT_BLUE_PLANK_DOOR = BLOCKS.register("light_blue_plank_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.OAK_DOOR)));
    public static final RegistryObject<TrapDoorBlock> LIGHT_BLUE_PLANK_TRAPDOOR = BLOCKS.register("light_blue_plank_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.OAK_TRAPDOOR)));
    public static final RegistryObject<FenceGateBlock> LIGHT_BLUE_PLANK_FENCE_GATE = BLOCKS.register("light_blue_plank_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE_GATE)));
    public static final RegistryObject<FenceBlock> LIGHT_BLUE_PLANK_FENCE = BLOCKS.register("light_blue_plank_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.OAK_FENCE)));
    public static final RegistryObject<WoodButtonBlock> LIGHT_BLUE_PLANK_BUTTON = BLOCKS.register("light_blue_plank_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(Blocks.OAK_BUTTON)));
    public static final RegistryObject<PressurePlateBlock> LIGHT_BLUE_PLANK_PRESSURE_PLATE = BLOCKS.register("light_blue_plank_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(Blocks.OAK_PRESSURE_PLATE)));
    public static final RegistryObject<Block> SOULSTONE = BLOCKS.register("soulstone",() -> new Block(AbstractBlock.Properties.create(Material.GLASS, MaterialColor.SAND).hardnessAndResistance(0.3F).sound(SoundType.GLASS).setLightLevel((p_235464_0_) -> { return 15; })));
    public static final RegistryObject<Block> SOUL_JACK_O_LANTERN = BLOCKS.register("soul_jack_o_lantern",() -> new CarvedPumpkinBlock(AbstractBlock.Properties.create(Material.GOURD, MaterialColor.ADOBE).hardnessAndResistance(1.0F).sound(SoundType.WOOD).setLightLevel((p_235462_0_) -> { return 15; })));
    public static final RegistryObject<AshMushroom> ASH_MUSHROOM = BLOCKS.register("ash_mushroom", () -> new AshMushroom(AbstractBlock.Properties.from(Blocks.BROWN_MUSHROOM)));
    public static final RegistryObject<Block> BLACK_CORUPTED_STONE = BLOCKS.register("black_corupted_stone", () -> new Block(AbstractBlock.Properties.from(Blocks.END_STONE).setLightLevel((p_235462_0_) -> { return 15;})));
    public static final RegistryObject<Block> DEVIL_JACK_O_LANTERN = BLOCKS.register("devil_jack_o_lantern",() -> new CarvedPumpkinBlock(AbstractBlock.Properties.create(Material.GOURD, MaterialColor.ADOBE).hardnessAndResistance(1.0F).sound(SoundType.WOOD).setLightLevel((p_235462_0_) -> { return 15; })));
    public static final RegistryObject<Block> BLUE_BRICKS = BLOCKS.register("blue_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> LIME_BRICKS = BLOCKS.register("lime_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> BLACK_BRICKS = BLOCKS.register("black_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> WHITE_BRICKS = BLOCKS.register("white_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> PURPLE_BRICKS = BLOCKS.register("purple_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> PINK_BRICKS = BLOCKS.register("pink_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> ORANGE_BRICKS = BLOCKS.register("orange_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> YELLOW_BRICKS = BLOCKS.register("yellow_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> GREEN_BRICKS = BLOCKS.register("green_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> LIGHT_BLUE_BRICKS = BLOCKS.register("light_blue_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> FLOWER_O_HEALING = BLOCKS.register("flower_o_healing", () -> new FlowerOHealing(AbstractBlock.Properties.from(Blocks.WITHER_ROSE)));
    public static final RegistryObject<Block> FLOWER_O_POISON = BLOCKS.register("flower_o_poison", () -> new FlowerOPoison(AbstractBlock.Properties.from(Blocks.WITHER_ROSE)));
    public static final RegistryObject<Block> WET_LAVA_SPONGE = BLOCKS.register("wet_lava_sponge", () -> new Block(AbstractBlock.Properties.from(Blocks.WET_SPONGE)));
    public static final RegistryObject<Block> LAVA_SPONGE = BLOCKS.register("lava_sponge", () -> new LavaSponge(AbstractBlock.Properties.from(Blocks.SPONGE)));
    public static final RegistryObject<Block> BLUE_BRICK_WALL = BLOCKS.register("blue_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> GREEN_BRICK_WALL = BLOCKS.register("green_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> LIME_BRICK_WALL = BLOCKS.register("lime_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> YELLOW_BRICK_WALL = BLOCKS.register("yellow_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> ORANGE_BRICK_WALL = BLOCKS.register("orange_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> HEAVY_COBBLESTONE = BLOCKS.register("heavy_cobblestone", () -> new Block(AbstractBlock.Properties.from(Blocks.COBBLESTONE).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRAY_BRICKS = BLOCKS.register("gray_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> LIGHT_GRAY_BRICKS = BLOCKS.register("light_gray_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> BROWN_BRICKS = BLOCKS.register("brown_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> MAGENTA_BRICKS = BLOCKS.register("magenta_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> CYAN_BRICKS = BLOCKS.register("cyan_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> MUSHROOM_HEAD = BLOCKS.register("mushroom_head", () -> new MushroomHeadBlock(AbstractBlock.Properties.create(Material.MISCELLANEOUS).hardnessAndResistance(1.0F)));
    public static final RegistryObject<Block> BLACK_ITEM_HOLDER = BLOCKS.register("black_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> WHITE_ITEM_HOLDER = BLOCKS.register("white_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> RED_ITEM_HOLDER = BLOCKS.register("red_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> BLUE_ITEM_HOLDER = BLOCKS.register("blue_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> YELLOW_ITEM_HOLDER = BLOCKS.register("yellow_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> PINK_ITEM_HOLDER = BLOCKS.register("pink_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> GREEN_ITEM_HOLDER = BLOCKS.register("green_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> GRAY_ITEM_HOLDER = BLOCKS.register("gray_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> LIGHT_GRAY_ITEM_HOLDER = BLOCKS.register("light_gray_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> LIGHT_BLUE_ITEM_HOLDER = BLOCKS.register("light_blue_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> BROWN_ITEM_HOLDER = BLOCKS.register("brown_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> CYAN_ITEM_HOLDER = BLOCKS.register("cyan_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> LIME_ITEM_HOLDER = BLOCKS.register("lime_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> RED_LEAVES = BLOCKS.register("red_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> RED_VINE = BLOCKS.register("red_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> BLACK_LEAVES = BLOCKS.register("black_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> WHITE_LEAVES = BLOCKS.register("white_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> BLUE_LEAVES = BLOCKS.register("blue_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> LIGHT_BLUE_LEAVES = BLOCKS.register("light_blue_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> CYAN_LEAVES = BLOCKS.register("cyan_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> YELLOW_LEAVES = BLOCKS.register("yellow_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> BROWN_LEAVES = BLOCKS.register("brown_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> ORANGE_LEAVES = BLOCKS.register("orange_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> LIGHT_GRAY_LEAVES = BLOCKS.register("light_gray_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> GRAY_LEAVES = BLOCKS.register("gray_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> PINK_LEAVES = BLOCKS.register("pink_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> PURPLE_LEAVES = BLOCKS.register("purple_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> HEAVY_COBBLESTONE_STAIR = BLOCKS.register("heavy_cobblestone_stair", () -> new StairsBlock(BlockInit.HEAVY_COBBLESTONE.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> HEAVY_COBBLESTONE_SLAB = BLOCKS.register("heavy_cobblestone_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.COBBLESTONE_SLAB)));
    public static final RegistryObject<Block> LAVENDER = BLOCKS.register("lavender", () -> new FlowerBlock(Effects.GLOWING, 5, AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.PLANT)));
    public static final RegistryObject<Block> ORANGE_ITEM_HOLDER = BLOCKS.register("orange_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> MAGENTA_ITEM_HOLDER = BLOCKS.register("magenta_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> PURPLE_ITEM_HOLDER = BLOCKS.register("purple_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> ORANGE_ROSE_BUSH = BLOCKS.register("orange_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> BLACK_ROSE_BUSH = BLOCKS.register("black_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> LIGHT_GRAY_ROSE_BUSH = BLOCKS.register("light_gray_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> YELLOW_ROSE_BUSH = BLOCKS.register("yellow_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> PURPLE_ROSE_BUSH = BLOCKS.register("purple_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> WHITE_ROSE_BUSH = BLOCKS.register("white_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> BLUE_ROSE_BUSH = BLOCKS.register("blue_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> PINK_ROSE_BUSH = BLOCKS.register("pink_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> GRAY_ROSE_BUSH = BLOCKS.register("gray_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> LIGHT_BLUE_ROSE_BUSH = BLOCKS.register("light_blue_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> MAGENTA_ROSE_BUSH = BLOCKS.register("magenta_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> CYAN_ROSE_BUSH = BLOCKS.register("cyan_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> WHITE_BRICK_WALL = BLOCKS.register("white_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> BLACK_BRICK_WALL = BLOCKS.register("black_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> GRAY_BRICK_WALL = BLOCKS.register("gray_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> LIGHT_GRAY_BRICK_WALL = BLOCKS.register("light_gray_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> PURPLE_BRICK_WALL = BLOCKS.register("purple_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> PINK_BRICK_WALL = BLOCKS.register("pink_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> MAGENTA_BRICK_WALL = BLOCKS.register("magenta_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> CYAN_BRICK_WALL = BLOCKS.register("cyan_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> BROWN_BRICK_WALL = BLOCKS.register("brown_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> LIGHT_BLUE_BRICK_WALL = BLOCKS.register("light_blue_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> BROWN_BRICK_SLAB = BLOCKS.register("brown_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> BLACK_BRICK_SLAB = BLOCKS.register("black_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> WHITE_BRICK_SLAB = BLOCKS.register("white_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> GRAY_BRICK_SLAB = BLOCKS.register("gray_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> PURPLE_BRICK_SLAB = BLOCKS.register("purple_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> PINK_BRICK_SLAB = BLOCKS.register("pink_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> MAGENTA_BRICK_SLAB = BLOCKS.register("magenta_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> GREEN_BRICK_SLAB = BLOCKS.register("green_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> LIME_BRICK_SLAB = BLOCKS.register("lime_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> BLUE_BRICK_SLAB = BLOCKS.register("blue_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> CYAN_BRICK_SLAB = BLOCKS.register("cyan_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> LIGHT_BLUE_BRICK_SLAB = BLOCKS.register("light_blue_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> YELLOW_BRICK_SLAB = BLOCKS.register("yellow_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> ORANGE_BRICK_SLAB = BLOCKS.register("orange_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> LIGHT_GRAY_BRICK_SLAB = BLOCKS.register("light_gray_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> BLUE_VINE = BLOCKS.register("blue_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> BLACK_BRICK_STAIR = BLOCKS.register("black_brick_stair", () -> new StairsBlock(BlockInit.BLACK_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> WHITE_BRICK_STAIR = BLOCKS.register("white_brick_stair", () -> new StairsBlock(BlockInit.WHITE_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> GRAY_BRICK_STAIR = BLOCKS.register("gray_brick_stair", () -> new StairsBlock(BlockInit.GRAY_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> ADVANCER = BLOCKS.register("advancer", ()-> new AdvancerBlock(AbstractBlock.Properties.create(Material.ROCK).setRequiresTool().hardnessAndResistance(3.5F)));
    public static final RegistryObject<Block> WHITE_POLISHED_GLASS = BLOCKS.register("white_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> GRAY_POLISHED_GLASS = BLOCKS.register("gray_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> RED_POLISHED_GLASS = BLOCKS.register("red_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> BLACK_POLISHED_GLASS = BLOCKS.register("black_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> CYAN_POLISHED_GLASS = BLOCKS.register("cyan_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> BLUE_POLISHED_GLASS = BLOCKS.register("blue_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> LIGHT_BLUE_POLISHED_GLASS = BLOCKS.register("light_blue_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> PINK_POLISHED_GLASS = BLOCKS.register("pink_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> PURPLE_POLISHED_GLASS = BLOCKS.register("purple_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> MAGENTA_POLISHED_GLASS = BLOCKS.register("magenta_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> GREEN_POLISHED_GLASS = BLOCKS.register("green_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> LIME_POLISHED_GLASS = BLOCKS.register("lime_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> ORANGE_POLISHED_GLASS = BLOCKS.register("orange_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> YELLOW_POLISHED_GLASS = BLOCKS.register("yellow_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> BROWN_POLISHED_GLASS = BLOCKS.register("brown_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> LIGHT_GRAY_POLISHED_GLASS = BLOCKS.register("light_gray_polished_glass", () -> new GlassBlock(AbstractBlock.Properties.create(Material.GLASS).hardnessAndResistance(0.3F).sound(SoundType.GLASS).notSolid()));
    public static final RegistryObject<Block> MOLTEN_OBSIDIAN = BLOCKS.register("molten_obsidian", () -> new MoltenObsidian(AbstractBlock.Properties.create(Material.ROCK).hardnessAndResistance(1.0F).sound(SoundType.STONE).notSolid().setLightLevel((p_235462_0_) -> { return 15;})));
    public static final RegistryObject<Block> BLUE_BRICK_STAIR = BLOCKS.register("blue_brick_stair", () -> new StairsBlock(BlockInit.BLUE_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> CYAN_BRICK_STAIR = BLOCKS.register("cyan_brick_stair", () -> new StairsBlock(BlockInit.CYAN_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> LIGHT_BLUE_BRICK_STAIR = BLOCKS.register("light_blue_brick_stair", () -> new StairsBlock(BlockInit.LIGHT_BLUE_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> HEAVY_COBBLESTONE_WALL = BLOCKS.register("heavy_cobblestone_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> POTTED_MILK_CUP = BLOCKS.register("potted_milk_cup", () -> new FlowerPotBlock(BlockInit.MILK_CUP.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> POTTED_LAVENDER = BLOCKS.register("potted_lavender", () -> new FlowerPotBlock(LAVENDER.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> POTTED_FLOWER_O_HEALING = BLOCKS.register("potted_flower_o_healing", () -> new FlowerPotBlock(FLOWER_O_HEALING.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> POTTED_FLOWER_O_POISON = BLOCKS.register("potted_flower_o_poison", () -> new FlowerPotBlock(FLOWER_O_POISON.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> RED_BRICKS = BLOCKS.register("red_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.BRICKS)));
    public static final RegistryObject<Block> PINK_BRICK_STAIR = BLOCKS.register("pink_brick_stair", () -> new StairsBlock(BlockInit.PINK_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> PURPLE_BRICK_STAIR = BLOCKS.register("purple_brick_stair", () -> new StairsBlock(BlockInit.PURPLE_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> MAGENTA_BRICK_STAIR = BLOCKS.register("magenta_brick_stair", () -> new StairsBlock(BlockInit.MAGENTA_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> LIME_BRICK_STAIR = BLOCKS.register("lime_brick_stair", () -> new StairsBlock(BlockInit.LIME_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> YELLOW_BRICK_STAIR = BLOCKS.register("yellow_brick_stair", () -> new StairsBlock(BlockInit.YELLOW_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> GREEN_BRICK_STAIR = BLOCKS.register("green_brick_stair", () -> new StairsBlock(BlockInit.GREEN_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> ORANGE_BRICK_STAIR = BLOCKS.register("orange_brick_stair", () -> new StairsBlock(BlockInit.ORANGE_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> BROWN_BRICK_STAIR = BLOCKS.register("brown_brick_stair", () -> new StairsBlock(BlockInit.BROWN_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> LIGHT_GRAY_BRICK_STAIR = BLOCKS.register("light_gray_brick_stair", () -> new StairsBlock(BlockInit.LIGHT_GRAY_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> RED_BRICK_STAIR = BLOCKS.register("red_brick_stair", () -> new StairsBlock(BlockInit.RED_BRICKS.get().getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> RED_BRICK_SLAB = BLOCKS.register("red_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.BRICK_SLAB)));
    public static final RegistryObject<Block> RED_BRICK_WALL = BLOCKS.register("red_brick_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.BRICK_WALL)));
    public static final RegistryObject<Block> LIGHT_BLUE_VINE = BLOCKS.register("light_blue_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> WHITE_VINE = BLOCKS.register("white_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> YELLOW_VINE = BLOCKS.register("yellow_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> ORANGE_VINE = BLOCKS.register("orange_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> BIRCH_ITEM_HOLDER = BLOCKS.register("birch_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> OAK_ITEM_HOLDER = BLOCKS.register("oak_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> JUNGLE_ITEM_HOLDER = BLOCKS.register("jungle_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> CRIMSON_ITEM_HOLDER = BLOCKS.register("crimson_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> WARPED_ITEM_HOLDER = BLOCKS.register("warped_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> ACACIA_ITEM_HOLDER = BLOCKS.register("acacia_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> GREEN_CONCRETE_STAIR = BLOCKS.register("green_concrete_stair", () -> new StairsBlock(Blocks.GREEN_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> YELLOW_LEAVE_CARPET = BLOCKS.register("yellow_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> BLUE_LEAVE_CARPET = BLOCKS.register("blue_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> ORANGE_LEAVE_CARPET = BLOCKS.register("orange_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> RED_LEAVE_CARPET = BLOCKS.register("red_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> BLACK_LEAVE_CARPET = BLOCKS.register("black_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> WHITE_LEAVE_CARPET = BLOCKS.register("white_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> GRAY_LEAVE_CARPET = BLOCKS.register("gray_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> PINK_LEAVE_CARPET = BLOCKS.register("pink_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> PURPLE_LEAVE_CARPET = BLOCKS.register("purple_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> MAGENTA_LEAVE_CARPET = BLOCKS.register("magenta_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> LIGHT_BLUE_LEAVE_CARPET = BLOCKS.register("light_blue_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> LIGHT_GRAY_LEAVE_CARPET = BLOCKS.register("light_gray_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> CYAN_LEAVE_CARPET = BLOCKS.register("cyan_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> BROWN_LEAVE_CARPET = BLOCKS.register("brown_leave_carpet", () -> new CarpetBlock(DyeColor.GREEN,AbstractBlock.Properties.from(Blocks.OAK_LEAVES).sound(SoundType.CROP)));
    public static final RegistryObject<Block> BLACK_VINE = BLOCKS.register("black_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> GRAY_VINE = BLOCKS.register("gray_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> PINK_VINE = BLOCKS.register("pink_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> PURPLE_VINE = BLOCKS.register("purple_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> MAGENTA_VINE = BLOCKS.register("magenta_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> CYAN_VINE = BLOCKS.register("cyan_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> DARK_OAK_ITEM_HOLDER = BLOCKS.register("dark_oak_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> SPRUCE_ITEM_HOLDER = BLOCKS.register("spruce_item_holder", () ->  new ItemHolderBlock(AbstractBlock.Properties.from(Blocks.ANVIL)));
    public static final RegistryObject<Block> BROWN_VINE = BLOCKS.register("brown_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> LIGHT_GRAY_VINE = BLOCKS.register("light_gray_vine", () -> new VineBlock(AbstractBlock.Properties.create(Material.TALL_PLANTS).doesNotBlockMovement().tickRandomly().hardnessAndResistance(0.2F).sound(SoundType.VINE)));
    public static final RegistryObject<Block> BLACK_CONCRETE_STAIR = BLOCKS.register("black_concrete_stair", () -> new StairsBlock(Blocks.BLACK_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> WHITE_CONCRETE_STAIR = BLOCKS.register("white_concrete_stair", () -> new StairsBlock(Blocks.WHITE_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> GRAY_CONCRETE_STAIR = BLOCKS.register("gray_concrete_stair", () -> new StairsBlock(Blocks.GRAY_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> MOON_FLOWER = BLOCKS.register("moon_flower", () -> new LadderBlock(AbstractBlock.Properties.create(Material.PLANTS).tickRandomly().hardnessAndResistance(0.2F, 3.0F).sound(SoundType.WOOD).notSolid()));
    public static final RegistryObject<Block> BLUE_CONCRETE_STAIR = BLOCKS.register("blue_concrete_stair", () -> new StairsBlock(Blocks.BLUE_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> CYAN_CONCRETE_STAIR = BLOCKS.register("cyan_concrete_stair", () -> new StairsBlock(Blocks.CYAN_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_STAIR = BLOCKS.register("light_blue_concrete_stair", () -> new StairsBlock(Blocks.LIGHT_BLUE_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> BROWN_ROSE_BUSH = BLOCKS.register("brown_rose_bush", () -> new TallFlowerBlock(AbstractBlock.Properties.from(Blocks.ROSE_BUSH)));
    public static final RegistryObject<Block> PINK_CONCRETE_STAIR = BLOCKS.register("pink_concrete_stair", () -> new StairsBlock(Blocks.PINK_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> PURPLE_CONCRETE_STAIR = BLOCKS.register("purple_concrete_stair", () -> new StairsBlock(Blocks.PURPLE_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> MAGENTA_CONCRETE_STAIR = BLOCKS.register("magenta_concrete_stair", () -> new StairsBlock(Blocks.MAGENTA_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> YELLOW_CONCRETE_STAIR = BLOCKS.register("yellow_concrete_stair", () -> new StairsBlock(Blocks.YELLOW_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> ORANGE_CONCRETE_STAIR = BLOCKS.register("orange_concrete_stair", () -> new StairsBlock(Blocks.ORANGE_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> LIME_CONCRETE_STAIR = BLOCKS.register("lime_concrete_stair", () -> new StairsBlock(Blocks.LIME_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> HASTE_ORE = BLOCKS.register("haste_ore", () -> new OreBlock(AbstractBlock.Properties.create(Material.ROCK).setRequiresTool().hardnessAndResistance(3.0F, 3.0F)));
    public static final RegistryObject<Block> LUCK_ORE = BLOCKS.register("luck_ore", () -> new OreBlock(AbstractBlock.Properties.create(Material.ROCK).setRequiresTool().hardnessAndResistance(3.0F, 3.0F)));
    public static final RegistryObject<Block> RED_CONCRETE_STAIR = BLOCKS.register("red_concrete_stair", () -> new StairsBlock(Blocks.RED_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> BROWN_CONCRETE_STAIR = BLOCKS.register("brown_concrete_stair", () -> new StairsBlock(Blocks.BROWN_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_STAIR = BLOCKS.register("light_gray_concrete_stair", () -> new StairsBlock(Blocks.LIGHT_GRAY_CONCRETE.getDefaultState(),AbstractBlock.Properties.from(Blocks.COBBLESTONE_STAIRS)));
    public static final RegistryObject<SlabBlock> LIGHT_BLUE_CONCRETE_SLAB = BLOCKS.register("light_blue_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> BLUE_CONCRETE_SLAB = BLOCKS.register("blue_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> CYAN_CONCRETE_SLAB = BLOCKS.register("cyan_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> BLACK_CONCRETE_SLAB = BLOCKS.register("black_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> WHITE_CONCRETE_SLAB = BLOCKS.register("white_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> BROWN_CONCRETE_SLAB = BLOCKS.register("brown_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> RED_CONCRETE_SLAB = BLOCKS.register("red_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> ORANGE_CONCRETE_SLAB = BLOCKS.register("orange_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> YELLOW_CONCRETE_SLAB = BLOCKS.register("yellow_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<Block> GARDENING_TABLE = BLOCKS.register("gardening_table", () -> new GardeningTableBlock(AbstractBlock.Properties.from(Blocks.QUARTZ_BLOCK)));
    public static final RegistryObject<Block> CHICKEN_HUT = BLOCKS.register("chicken_hut", () -> new ChickenHutBlock(AbstractBlock.Properties.from(Blocks.ACACIA_WOOD)));
    public static final RegistryObject<SlabBlock> PINK_CONCRETE_SLAB = BLOCKS.register("pink_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> PURPLE_CONCRETE_SLAB = BLOCKS.register("purple_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> MAGENTA_CONCRETE_SLAB = BLOCKS.register("magenta_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> GRAY_CONCRETE_SLAB = BLOCKS.register("gray_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> LIGHT_GRAY_CONCRETE_SLAB = BLOCKS.register("light_gray_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> GREEN_CONCRETE_SLAB = BLOCKS.register("green_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<SlabBlock> LIME_CONCRETE_SLAB = BLOCKS.register("lime_concrete_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WHITE_CONCRETE)));
    public static final RegistryObject<Block> TEA_BLOCK = BLOCKS.register("tea_block", () -> new TeaBlock(AbstractBlock.Properties.create(Material.IRON).setRequiresTool().hardnessAndResistance(0.5F).setLightLevel((state) -> {
        return 1;
    }).notSolid()));
    public static final RegistryObject<Block> LIME_SAND = BLOCKS.register("lime_sand", () -> new SandBlock(14406560,AbstractBlock.Properties.from(Blocks.SAND)));
    public static final RegistryObject<Block> ORANGE_SAND = BLOCKS.register("orange_sand", () -> new SandBlock(14406560,AbstractBlock.Properties.from(Blocks.SAND)));
    public static final RegistryObject<Block> YELLOW_SAND = BLOCKS.register("yellow_sand", () -> new SandBlock(14406560,AbstractBlock.Properties.from(Blocks.SAND)));
    public static final RegistryObject<Block> PINK_SAND = BLOCKS.register("pink_sand", () -> new SandBlock(14406560,AbstractBlock.Properties.from(Blocks.SAND)));
    public static final RegistryObject<Block> PURPLE_SAND = BLOCKS.register("purple_sand", () -> new SandBlock(14406560,AbstractBlock.Properties.from(Blocks.SAND)));

}


